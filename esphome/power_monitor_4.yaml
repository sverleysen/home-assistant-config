substitutions:
  plug_name: power_monitor_4
  # Higher value gives lower watt readout
  current_res: "0.00290"
  # Lower value gives lower voltage readout
  voltage_div: "700"
  
esphome:
  name: ${plug_name}
  platform: ESP8266
  board: esp8285
  
wifi:
  ssid: !secret esp_home_wifi_ssid
  password: !secret esp_home_wifi_pass
  #use_address: engery_temp.local

captive_portal:

# Enable logging
logger:

web_server:
  port: 80

# Enable Home Assistant API
api:
  password: !secret esp_home_ota_pass

ota:
  password: !secret esp_home_ota_pass
  
# Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

# Text sensors with general information
text_sensor:
  - platform: version
    name: "${plug_name}_version"
  - platform: wifi_info
    ip_address:
      name: "${plug_name}_ip"
    ssid:
      name: "${plug_name}_ssid"
    bssid:
      name: "${plug_name}_bssid"

sensor:
  # Uptime sensor
  - platform: uptime
    name: "${plug_name}_uptime"
  # WiFi Signal sensor
  - platform: wifi_signal
    name: "${plug_name}_wifi_signal"
    update_interval: 10s
  # Power sensor
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO05
    cf1_pin: GPIO04
    change_mode_every: 3
    update_interval: 3s
    current_resistor: ${current_res}
    voltage_divider: ${voltage_div}
    # Current sensor
    current:
      name: "${plug_name}_current"
      unit_of_measurement: A
      accuracy_decimals: 3
      filters:
        # Make everything below 0.01A appear as just 0A.
        # Furthermore it corrects 0.012A for the power usage of the plug.
        #- lambda: if (x < (0.01 - 0.012)) return 0; else return (x - 0.012);
    # Voltage sensor
    voltage:
      name: "${plug_name}_voltage"
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
    # Power sensor
    power:
      id: power
      name: "${plug_name}_power"
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        # Make everything below 2W appear as just 0W.
        # Furthermore it corrects 1.15W for the power usage of the plug.
        #- lambda: if (x < (2 + 1.15)) return 0; else return (x - 1.15);
  # Total daily energy sensor
  - platform: total_daily_energy
    name: "${plug_name}_daily_energy"
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    name: "${plug_name}_button"
    pin:
      number: GPIO13
      inverted: true
    on_press:
      - switch.toggle: relay

switch:
  # Switch to restart the plug
  - platform: restart
    name: "${plug_name}_restart"
  # Switch to toggle the relay
  - platform: gpio
    id: relay
    name: "${plug_name}_switch"
    restore_mode: ALWAYS_ON
    pin: GPIO15
    on_turn_on:
      - light.turn_off: led
    on_turn_off:
      - light.turn_off: led

output:
  # Relay state led
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO00
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    output: state_led
    id: led
    name: "${plug_name} Red LED"

# Uses the red LED as status indicator
status_led:
  pin:
    number: GPIO02
    inverted: true